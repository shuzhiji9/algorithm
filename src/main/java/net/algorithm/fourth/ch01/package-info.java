/**
 * 算法第四版第一章
 */
/**
 * @author Administrator
 *
 */
package net.algorithm.fourth.ch01;

/**
学习算法的主要原因是他们能节约非常多的资源,甚至能够让我们完成一些本不可能完成的任务.
1.1.1 Java程序的基本结构
编程语言共有的特点:
	原始数据类型: 整数/浮点数/布尔值等. 类似于数学公示定义的表达式.
	语句: 语句通过创建变量并对其赋值/控制运行流程或者引发副作用来进行计算, 六种语句: 声明,赋值,条件,循环,调用和返回
	数组: 数组是多个同种数据类型的值的集合.
	静态方法
	字符串
	标准输入/输出: 是程序员于外界联系的桥梁
	数据抽象: 数据抽象封装和重用代码. 使我们可以定义非原始数据类型,进而面向对象编程.
*/

/**
1.1.2 原始数据类型与表达式
数据类型就是一组数据和对其所能进行的操作的集合, Java 最基本的4 种原始数据类型
	整型,及其算术运算符(int)
	浮点型, 运算符(double)
	布尔型, 它的值{true,false} 及其逻辑操作(boolean)
	字符型, 它的值是你能够输入的英文字母数字字符和符号(char)
*/
/**
1.1.3 语句
Java程序是由语句组成的. 语句能够通过创建和操作变量,对变量赋值并控制这些操作的执行流程来描述运算.
	声明语句: 创建某种类型的变量并使用标识符为其命名.
	赋值语句: 将某种类型的数值赋予一个变量
	条件语句: 能够简单的改变执行流程
	循环语句: 更彻底地改变执行流程
	调用和返回语句: 改变流程和代码组织的另一种方式
for 语句:
	for(<initialize>;<boolean expression>;<increment>)
	{
		<block statements>
	}
while 语句:
	<initialize>;
	while(<boolean expression>)
	{
		<block statements>
		<increment>
	}
*/
/**
1.1.5 数组
数组能够顺序存储相同类型的多个数据.
1.1.5.1 创建并初始化数组
	声明数组的名字和类型
	创建数组
	初始化数组元素
*/
/**
1.1.6.4 递归
编写递归代码时有最重要的以下三点:
	递归总有一个最简单的情况  ---- 方法的第一条语句总是一个包含return的条件语句.
	递归调用总是去尝试解决一个规模更小的子问题,这样递归才能收敛到最简单的情况. 
	递归调用的父问题和尝试解决的子问题之间不应该有交集.
*/